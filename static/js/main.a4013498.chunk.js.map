{"version":3,"sources":["types.ts","routes/Home.tsx","constants.ts","utils.ts","components/Button.tsx","components/NumberDisplay.tsx","components/Header.tsx","routes/Play.tsx","components/App.tsx","index.tsx"],"names":["CellValue","CellState","Face","Home","history","useHistory","className","onClick","push","MAX_ROWS","MAX_COLS","grabAllAdjacentCells","cells","rowParam","colParam","topLeftCell","topCell","topRightCell","leftCell","rightCell","bottomLeftCell","bottomCell","bottomrightCell","generateCells","row","col","value","none","state","open","bombsPlaced","randomRow","Math","floor","random","randomCol","bomb","map","rowIndex","cell","colIndex","currentCell","numberOfBombs","openMultipleCells","visible","flagged","newCells","slice","Button","onContext","red","onContextMenu","role","NumberDisplay","name","abs","toString","padStart","Header","bombCounter","face","time","setLive","setTime","setCells","setHasLost","setHasWon","setBombCounter","Play","useState","smile","setFace","live","hasLost","hasWon","useEffect","handleMouseDown","oh","handleMouseUp","window","addEventListener","removeEventListener","timer","setInterval","clearInterval","lost","won","handleCellClick","includes","showAllBombs","openCellsExist","handleCellContext","e","preventDefault","currentCells","getGameState","gameState","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a4013498.chunk.js","sourcesContent":["export enum CellValue {\n  none,\n  one,\n  two,\n  three,\n  four,\n  five,\n  six,\n  seven,\n  eight,\n  bomb,\n}\n\nexport enum CellState {\n  open,\n  visible,\n  flagged,\n}\n\nexport type Cell = {\n  value: CellValue;\n  state: CellState;\n  red?: boolean;\n};\n\nexport enum Face {\n  smile = \"😀\",\n  oh = \"😮\",\n  lost = \"😵\",\n  won = \"😎\",\n}\n","import { useHistory } from \"react-router\";\nimport \"scss/home.scss\";\n\nconst Home: React.FC = () => {\n  const history = useHistory();\n\n  const onClick = () => history.push(\"/play\");\n\n  return (\n    <div className=\"home\">\n      <h1>Start game</h1>\n      <button onClick={onClick} className=\"startBtn\">\n        Start\n      </button>\n    </div>\n  );\n};\n\nexport default Home;\n","export const getLevel = (level: string | \"Beginner\"): number => {\n  switch (level) {\n    case \"Beginner\":\n      return 10;\n    case \"Intermediate\":\n      return 15;\n    case \"Expert\":\n      return 20;\n    default:\n      return 10;\n  }\n};\n\nexport const LEVEL_NUM = \"level_number\";\nexport const MAX_ROWS = 10;\nexport const MAX_COLS = 10;\nexport const NO_OF_BOMBS = 10;\n","import { CellValue, CellState, Cell } from \"./types\";\nimport { MAX_COLS, MAX_ROWS, NO_OF_BOMBS } from \"./constants\";\n\nconst grabAllAdjacentCells = (\n  cells: Cell[][],\n  rowParam: number,\n  colParam: number \n): {\n  topLeftCell: Cell | null;\n  topCell: Cell | null;\n  topRightCell: Cell | null;\n  leftCell: Cell | null;\n  rightCell: Cell | null;\n  bottomLeftCell: Cell | null;\n  bottomCell: Cell | null;\n  bottomrightCell: Cell | null;\n} => {\n  const topLeftCell =\n    rowParam > 0 && colParam > 0 ? cells[rowParam - 1][colParam - 1] : null;\n  const topCell = rowParam > 0 ? cells[rowParam - 1][colParam] : null;\n  const topRightCell =\n    rowParam > 0 && colParam < MAX_COLS\n      ? cells[rowParam - 1][colParam + 1]\n      : null;\n  const leftCell = colParam > 0 ? cells[rowParam][colParam - 1] : null;\n  const rightCell = colParam < MAX_COLS ? cells[rowParam][colParam + 1] : null;\n  const bottomLeftCell =\n    rowParam < MAX_ROWS - 1 && colParam > 0\n      ? cells[rowParam + 1][colParam - 1]\n      : null;\n  const bottomCell =\n    rowParam < MAX_COLS - 1 ? cells[rowParam + 1][colParam] : null;\n  const bottomrightCell =\n    rowParam < MAX_ROWS - 1 && colParam < MAX_COLS - 1\n      ? cells[rowParam + 1][colParam + 1]\n      : null;\n\n  return {\n    topLeftCell,\n    topCell,\n    topRightCell,\n    leftCell,\n    rightCell,\n    bottomLeftCell,\n    bottomCell,\n    bottomrightCell,\n  };\n};\n\nexport const generateCells = (): Cell[][] => {\n  let cells: Cell[][] = [];\n\n  //generating all cells\n  for (let row = 0; row < MAX_ROWS; row++) {\n    cells.push([]);\n    for (let col = 0; col < MAX_COLS; col++) {\n      cells[row].push({\n        value: CellValue.none,\n        state: CellState.open,\n      });\n    }\n  }\n\n  //randomly put 10 bombs\n  let bombsPlaced = 0;\n  while (bombsPlaced < NO_OF_BOMBS) {\n    const randomRow = Math.floor(Math.random() * MAX_ROWS);\n    const randomCol = Math.floor(Math.random() * MAX_COLS);\n    const currentCell = cells[randomRow][randomCol];\n    \n    if (currentCell.value !== CellValue.bomb) {\n      cells = cells.map((row, rowIndex) =>\n        row.map((cell, colIndex) => {\n          if (randomRow === rowIndex && randomCol === colIndex) {\n            return {\n              ...cell,\n              value: CellValue.bomb,\n            };\n          }\n\n          return cell;\n        })\n      );\n      bombsPlaced++;\n    }\n  }\n\n  //calculate the numbers for each cell\n  for (let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\n    for (let colIndex = 0; colIndex < MAX_COLS; colIndex++) {\n      const currentCell = cells[rowIndex][colIndex];\n      if (currentCell.value === CellValue.bomb) {\n        continue;\n      }\n\n      let numberOfBombs = 0;\n      const {\n        topLeftCell,\n        topCell,\n        topRightCell,\n        leftCell,\n        rightCell,\n        bottomLeftCell,\n        bottomCell,\n        bottomrightCell,\n      } = grabAllAdjacentCells(cells, rowIndex, colIndex);\n\n      if (topLeftCell?.value === CellValue.bomb) numberOfBombs++;\n      if (topCell?.value === CellValue.bomb) numberOfBombs++;\n      if (topRightCell?.value === CellValue.bomb) numberOfBombs++;\n      if (leftCell?.value === CellValue.bomb) numberOfBombs++;\n      if (rightCell?.value === CellValue.bomb) numberOfBombs++;\n      if (bottomLeftCell?.value === CellValue.bomb) numberOfBombs++;\n      if (bottomCell?.value === CellValue.bomb) numberOfBombs++;\n      if (bottomrightCell?.value === CellValue.bomb) numberOfBombs++;\n\n      if (numberOfBombs > 0) {\n        cells[rowIndex][colIndex] = {\n          ...currentCell,\n          value: numberOfBombs,\n        };\n      }\n    }\n  }\n\n  return cells;\n};\n\nexport const openMultipleCells = (\n  cells: Cell[][],\n  rowParam: number,\n  colParam: number\n): Cell[][] => {\n  const currentCell = cells[rowParam][colParam];\n\n  if (\n    currentCell.state === CellState.visible ||\n    currentCell.state === CellState.flagged\n  ) {\n    return cells;\n  }\n  \n  let newCells = cells.slice();\n  newCells[rowParam][colParam].state = CellState.visible;\n\n  const {\n    topLeftCell,\n    topCell,\n    topRightCell,\n    leftCell,\n    rightCell,\n    bottomLeftCell,\n    bottomCell,\n    bottomrightCell,\n  } = grabAllAdjacentCells(cells, rowParam, colParam);\n\n  if (\n    topLeftCell?.state === CellState.open &&\n    topLeftCell.value !== CellValue.bomb\n  ) {\n    if (topLeftCell.value === CellValue.none) {\n      openMultipleCells(newCells, rowParam - 1, colParam - 1);\n    } else {\n      newCells[rowParam - 1][colParam - 1].state = CellState.visible;\n    }\n  }\n\n  if (topCell?.state === CellState.open && topCell.value !== CellValue.bomb) {\n    if (topCell.value === CellValue.none) {\n      openMultipleCells(newCells, rowParam - 1, colParam);\n    } else {\n      newCells[rowParam - 1][colParam].state = CellState.visible;\n    }\n  }\n\n  if (\n    topRightCell?.state === CellState.open &&\n    topRightCell.value !== CellValue.bomb\n  ) {\n    if (topRightCell.value === CellValue.none) {\n      openMultipleCells(newCells, rowParam - 1, colParam + 1);\n    } else {\n      newCells[rowParam - 1][colParam + 1].state = CellState.visible;\n    }\n  }\n\n  if (leftCell?.state === CellState.open && leftCell.value !== CellValue.bomb) {\n    if (leftCell.value === CellValue.none) {\n      openMultipleCells(newCells, rowParam, colParam - 1);\n    } else {\n      newCells[rowParam][colParam - 1].state = CellState.visible;\n    }\n  }\n\n  if (\n    rightCell?.state === CellState.open &&\n    rightCell.value !== CellValue.bomb\n  ) {\n    if (rightCell.value === CellValue.none) {\n      openMultipleCells(newCells, rowParam, colParam + 1);\n    } else {\n      newCells[rowParam][colParam + 1].state = CellState.visible;\n    }\n  }\n\n  if (\n    bottomLeftCell?.state === CellState.open &&\n    bottomLeftCell.value !== CellValue.bomb\n  ) {\n    if (bottomLeftCell.value === CellValue.none) {\n      openMultipleCells(newCells, rowParam + 1, colParam - 1);\n    } else {\n      newCells[rowParam + 1][colParam - 1].state = CellState.visible;\n    }\n  }\n\n  if (\n    bottomCell?.state === CellState.open &&\n    bottomCell.value !== CellValue.bomb\n  ) {\n    if (bottomCell.value === CellValue.none) {\n      openMultipleCells(newCells, rowParam + 1, colParam);\n    } else {\n      newCells[rowParam + 1][colParam].state = CellState.visible;\n    }\n  }\n\n  if (\n    bottomrightCell?.state === CellState.open &&\n    bottomrightCell.value !== CellValue.bomb\n  ) {\n    if (bottomrightCell.value === CellValue.none) {\n      openMultipleCells(newCells, rowParam + 1, colParam + 1);\n    } else {\n      newCells[rowParam + 1][colParam + 1].state = CellState.visible;\n    }\n  }\n\n  return newCells;\n};\n","import React from \"react\";\nimport \"scss/button.scss\";\nimport { CellState, CellValue } from \"types\";\n\ninterface ButtonProps {\n  row: number;\n  col: number;\n  state: CellState;\n  value: CellValue;\n  red?: boolean;\n  onClick(rowParam: number, colParam: number): (...args: any[]) => void;\n  onContext(rowParam: number, colParam: number): (...args: any[]) => void;\n}\n\nconst Button: React.FC<ButtonProps> = ({\n  row,\n  col,\n  onClick,\n  onContext,\n  state,\n  value,\n  red,\n}) => {\n  const renderContent = (): React.ReactNode => {\n    if (state === CellState.visible) {\n      if (value === CellValue.bomb) {\n        return <span role=\"img\">💣</span>;\n      } else if (value === CellValue.none) {\n        return null;\n      }\n\n      return value;\n    } else if (state === CellState.flagged) {\n      return <span role=\"img\">⛳️</span>;\n    }\n\n    return null;\n  };\n  return (\n    <div\n      className={`button ${\n        state === CellState.visible ? \"visible\" : \"\"\n      } value-${value} ${red ? \"red\" : \"\"}`}\n      onClick={onClick(row, col)}\n      onContextMenu={onContext(row, col)}\n    >\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport \"scss/numberDisplay.scss\";\n\ninterface NumberDisplayProps {\n  value: number;\n  name:string;\n}\n\nconst NumberDisplay: React.FC<NumberDisplayProps> = ({ value, name }) => {\n  return (\n    <div>\n      <span className='displayName'>{name === \"bombCounter\" ? 'Mines remain:' : \"Time:\"}</span>\n      <div className=\"numberDisplay\">\n        {value < 0\n          ? `-${Math.abs(value).toString().padStart(2, \"0\")}`\n          : value.toString().padStart(3, \"0\")}\n      </div>\n    </div>\n  );\n};\n\nexport default NumberDisplay;\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport NumberDisplay from \"components/NumberDisplay\";\nimport { Cell, Face } from \"types\";\nimport { generateCells } from \"utils\";\n\ninterface HeaderProps {\n  bombCounter: number;\n  face: Face;\n  time: number;\n  setLive: Dispatch<SetStateAction<boolean>>;\n  setTime: Dispatch<SetStateAction<number>>;\n  setCells: Dispatch<SetStateAction<Cell[][]>>;\n  setHasLost: Dispatch<SetStateAction<boolean>>;\n  setHasWon: Dispatch<SetStateAction<boolean>>;\n  setBombCounter: Dispatch<SetStateAction<number>>;\n}\n\nconst Header: React.FC<HeaderProps> = ({\n  bombCounter,\n  face,\n  time,\n  setLive,\n  setTime,\n  setCells,\n  setHasLost,\n  setHasWon,\n  setBombCounter\n}) => {\n  const handleFaceClick = (): void => {\n    setLive(false);\n    setTime(0);\n    setCells(generateCells());\n    setHasLost(false);\n    setHasWon(false);\n    setBombCounter(0)\n  };\n\n  return (\n    <div>\n      <div className=\"header\">\n        <NumberDisplay value={bombCounter} name=\"bombCounter\" />\n        <div className=\"face\" onClick={handleFaceClick}>\n          <span role=\"img\">{face}</span>\n        </div>\n        <NumberDisplay value={time} name=\"time\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import { MAX_COLS, MAX_ROWS } from \"../constants\";\nimport React, { useEffect, useState } from \"react\";\nimport \"scss/app.scss\";\nimport { Cell, CellState, CellValue, Face } from \"types\";\nimport { generateCells, openMultipleCells } from \"utils\";\nimport Button from \"components/Button\";\nimport Header from \"components/Header\";\n\nconst Play: React.FC = () => {\n  const [cells, setCells] = useState<Cell[][]>(generateCells());\n  const [face, setFace] = useState<Face>(Face.smile);\n  const [time, setTime] = useState<number>(0);\n  const [live, setLive] = useState<boolean>(false);\n  const [bombCounter, setBombCounter] = useState<number>(10);\n  const [hasLost, setHasLost] = useState<boolean>(false);\n  const [hasWon, setHasWon] = useState<boolean>(false);\n\n  useEffect(() => {\n    const handleMouseDown = (): void => setFace(Face.oh);\n    const handleMouseUp = (): void => setFace(Face.smile);\n\n    window.addEventListener(\"mousedown\", handleMouseDown);\n    window.addEventListener(\"mouseup\", handleMouseUp);\n\n    return () => {\n      window.removeEventListener(\"mousedown\", handleMouseDown);\n      window.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (live && time < 999) {\n      const timer = setInterval(() => setTime(time + 1), 1000);\n      return () => clearInterval(timer);\n    }\n  }, [live, time]);\n\n  useEffect(() => {\n    if (hasLost) {\n      setLive(false);\n      setFace(Face.lost);\n    }\n  }, [hasLost]);\n\n  useEffect(() => {\n    if (hasWon) {\n      setLive(false);\n      setFace(Face.won);\n    }\n  }, [hasWon]);\n\n  const handleCellClick = (rowParam: number, colParam: number) => (): void => {\n    let newCells = cells.slice();\n    let currentCell = newCells[rowParam][colParam];\n\n    //start the game\n    if (!live) {\n      while (currentCell.value === CellValue.bomb) {\n        newCells = generateCells();\n        currentCell = newCells[rowParam][colParam];\n      }\n      setLive(true);\n    }\n\n    if ([CellState.flagged, CellState.visible].includes(currentCell.state)) return;\n\n    if (currentCell.value === CellValue.bomb) {\n      // click the bomb\n      setHasLost(true);\n      newCells[rowParam][colParam].red = true;\n      newCells = showAllBombs();\n      setCells(newCells);\n      return;\n      \n    } else if (currentCell.value === CellValue.none) {\n      newCells = openMultipleCells(newCells, rowParam, colParam);\n    } else {\n      //click the number cell\n      newCells[rowParam][colParam].state = CellState.visible;\n    }\n\n    //Check to see if you have won\n    let openCellsExist = false;\n    for (let row = 0; row < MAX_ROWS; row++) {\n      for (let col = 0; col < MAX_COLS; col++) {\n        const currentCell = newCells[row][col];\n\n        if (\n          currentCell.value !== CellValue.bomb &&\n          currentCell.state === CellState.open\n        ) {\n          openCellsExist = true;\n          break;\n        }\n      }\n    }\n\n    if (!openCellsExist) {\n      newCells = newCells.map((row) =>\n        row.map((cell) => {\n          if (cell.value === CellValue.bomb) {\n            return {\n              ...cell,\n              state: CellState.flagged,\n            };\n          }\n          return cell;\n        })\n      );\n\n      setHasWon(true);\n    }\n\n    setCells(newCells);\n  };\n\n  const handleCellContext = (rowParam: number, colParam: number) => (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>\n  ): void => {\n    e.preventDefault();\n\n    if (!live) return; //if it's not started do nothing\n\n    const currentCells = cells.slice(); //copy cells\n    const currentCell = cells[rowParam][colParam];\n\n    if (currentCell.state === CellState.visible) {\n      return;\n    } else if (currentCell.state === CellState.open) {\n      currentCells[rowParam][colParam].state = CellState.flagged;\n      setCells(currentCells);\n      setBombCounter(bombCounter - 1);\n    } else if (currentCell.state === CellState.flagged) {\n      currentCells[rowParam][colParam].state = CellState.open;\n      setCells(currentCells);\n      setBombCounter(bombCounter + 1);\n    }\n  };\n\n  const renderCells = (): React.ReactNode => {\n    return cells.map((row, rowIndex) =>\n      row.map((cell, colIndex) => (\n        <Button\n          key={`${rowIndex} - ${colIndex}`}\n          state={cell.state}\n          value={cell.value}\n          row={rowIndex}\n          col={colIndex}\n          onClick={handleCellClick}\n          onContext={handleCellContext}\n          red={cell.red}\n        />\n      ))\n    );\n  };\n\n  const showAllBombs = (): Cell[][] => {\n    const currentCells = cells.slice();\n    return currentCells.map((row) =>\n      row.map((cell) => {\n        if (cell.value === CellValue.bomb) {\n          return { ...cell, state: CellState.visible };\n        }\n\n        return cell;\n      })\n    );\n  };\n\n  return (\n    <>\n      <h1 className=\"title\">Minesweeper</h1>\n      <div className=\"gameState\">{getGameState(face)}</div>\n      <div className=\"app\">\n        <Header\n          bombCounter={bombCounter}\n          face={face}\n          time={time}\n          setLive={setLive}\n          setTime={setTime}\n          setCells={setCells}\n          setHasLost={setHasLost}\n          setHasWon={setHasWon}\n          setBombCounter={setBombCounter}\n        />\n        <div className=\"body\">{renderCells()}</div>\n      </div>\n    </>\n  );\n};\n\nexport default Play;\n\nfunction getGameState(gameState: Face) {\n  switch (gameState) {\n    case Face.oh:\n      return \"Game in progress\";\n    case Face.smile:\n      return \"Game in progress\";\n    case Face.won:\n      return \"You won!\";\n    case Face.lost:\n      return \"You lost!\";\n  }\n}\n","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"routes/Home\";\nimport Play from \"routes/Play\";\n\nconst App = () => {\n  return (\n    <Router>\n      <Route exact path=\"/\">\n        <Home />\n      </Route>\n      <Route exact path=\"/play\">\n        <Play />\n      </Route>\n    </Router>\n  );\n};\n\nexport default App;\n","import App from \"components/App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}